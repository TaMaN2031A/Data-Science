# Agent? Understand user input => retrieve relevant information => generate smart responses => perform actions (API call etc)
# Agents use LLMs
# Agent > chatbot ==> chooses tools & executes tasks & execute tasks
# Agent's four components: Brain (LLM), Tools for Interaction (Agent connects to external tools, APIs, and databases), Memory for Context (Short term and Long term), Reasoning and Planning (Breaks down complex problem makes a plan)

# Haystack agent is universal method to interact with chat-based LLMs
"""
How to build an AI agent in Haystack?
By using three main elements in a pipeline:
- Chat Generators to generate tool calls or assistant responses with an LLM
- Tool class => allows LLM to perform actions such as: calling API & running a pipeline
- Tool Invoker => To execute tool calls generated by an LLM (Delegate this task to it)
"""
from haystack.utils.hf import HFGenerationAPIType

"""
How to create a tool in Haystack?
- Tool class: Creates a tool representation for a consistent tool-calling across all Generators => allows for most customization => user can define its own name and description
- ComponentTool class: Wraps a Haystack component as a callable tool
- @tool decorator: Creates tools from Python functions and automatically uses their name and docstring
- Toolset: Container for grouping multiple tools that can be passed directly to Agents or Generators
"""
from haystack.components.agents import Agent
from haystack.components.generators.chat import HuggingFaceAPIChatGenerator
from haystack.components.websearch import SerperDevWebSearch
from haystack.dataclasses import Document, ChatMessage
from haystack.tools.component_tool import ComponentTool
from haystack.utils import Secret

from typing import List

web_search = SerperDevWebSearch(top_k=3)
web_tool = ComponentTool(component=web_search,
                         name="web_search",
                         description="Search the web for current information like weather, news, or facts.")
tool_calling_agent = Agent(
    chat_generator=HuggingFaceAPIChatGenerator(api_type=HFGenerationAPIType.SERVERLESS_INFERENCE_API,
                                  api_params={"model": "Qwen/Qwen2.5-7B-Instruct",
                                             "provider": "together"},
                                  token=Secret.from_env_var("HF_TOKEN")),
    system_prompt="""You're a helpful agent. When asked about current information like weather, news, or facts, 
                     use the web_search tool to find the information and then summarize the findings.
                     When you get web search results, extract the relevant information and present it in a clear, 
                     concise manner""",
    tools=[web_tool]
)

user_message = ChatMessage.from_user("How is the weather in Berlin")
result = tool_calling_agent.run(messages=[user_message])
print(result["messages"][-1].text)